"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvenanceService = void 0;
const provenance = require("@provenanceio/provenance.js");
const bip39 = require("bip39");
const createHmac = require("crypto");
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const tx_1 = require("cosmjs-types/cosmos/bank/v1beta1/tx");
const tx_2 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
const crypto_1 = require("@cosmjs/crypto");
const config_provenance_1 = require("../config/config.provenance");
class ProvenanceService {
    constructor(environment) {
        this.environment = environment;
    }
    async init() {
        var _a;
        this.client = await stargate_1.StargateClient.connect(this.environment === "MAIN_NET"
            ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_RPC_URL
            : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_RPC_URL);
        return new ProvenanceService((_a = this.environment) !== null && _a !== void 0 ? _a : "TEST_NET");
    }
    setEnvironment(environment) {
        this.environment = environment;
    }
    getEnvironment() {
        return this.environment;
    }
    createProvenanceWallet() {
        const MASTER_SECRET = Buffer.from("Bitcoin seed", "utf8");
        const PRIVATE_KEY_SIZE = 32;
        const CHAINCODE_SIZE = 32;
        const mnemonic = bip39.generateMnemonic();
        const seed = bip39.mnemonicToSeedSync(mnemonic);
        const hmac = createHmac.createHmac("sha512", MASTER_SECRET);
        hmac.update(seed);
        const digest = hmac.digest();
        const privateKey = Buffer.from(digest.subarray(0, PRIVATE_KEY_SIZE));
        const chainCode = Buffer.from(digest.subarray(PRIVATE_KEY_SIZE, PRIVATE_KEY_SIZE + CHAINCODE_SIZE));
        const wallet = provenance.Wallet.fromPrivateKey(privateKey, chainCode, this.environment === "MAIN_NET" ? true : false);
        const getKey = wallet.getKey(0, 0);
        return {
            privateKey: privateKey.toString("hex"),
            address: getKey.address,
            publicKey: getKey.publicKey,
            mnemonicPhrase: mnemonic,
        };
    }
    async getBalance(address) {
        return await this.client.getBalance(address, "nhash");
    }
    async getTransactionDetails(txHash) {
        const faucetTx = await this.client.getTx(txHash);
        const decodedTx = tx_2.Tx.decode(faucetTx.tx);
        const sentMessage = tx_1.MsgSend.decode(decodedTx.body.messages[0].value);
        const hash = Number(sentMessage.amount[0].amount) / 1e9;
        return {
            senderAddress: sentMessage.fromAddress,
            receiverAddress: sentMessage.toAddress,
            tokenMintAddress: sentMessage.amount[0].denom,
            amount: hash,
        };
    }
    async createTransaction(senderAddress, receiverAddress, senderMnemonic, amount) {
        amount = 1000000000 * amount;
        const senderBalance = await this.getBalance(senderAddress);
        if (Number(senderBalance.amount) < amount) {
            throw new Error(`Sender account balance not sufficient. Current balance ${senderBalance.amount}`);
        }
        const path = (0, crypto_1.stringToPath)(this.environment === "MAIN_NET"
            ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_HDPATH
            : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_HDPATH);
        const signer = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(senderMnemonic, {
            prefix: this.environment === "MAIN_NET"
                ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_HRP
                : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_HRP,
            hdPaths: [path],
        });
        const signerAccount = await signer.getAccounts();
        const signerAddress = signerAccount[0].address;
        if (signerAddress !== senderAddress) {
        }
        const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(this.environment === "MAIN_NET"
            ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_RPC_URL
            : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_RPC_URL, signer);
        const result = await signingClient.sendTokens(signerAddress, receiverAddress, [{ denom: "nhash", amount: amount.toString() }], {
            amount: [{ denom: "nhash", amount: "2502007950" }],
            gas: "131339",
        });
        return {
            gasUsed: result.gasUsed,
            gasWanted: result.gasWanted,
            transactionHash: result.transactionHash,
        };
    }
}
exports.ProvenanceService = ProvenanceService;
//# sourceMappingURL=data:application/json;base64,