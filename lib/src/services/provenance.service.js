"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvenanceService = void 0;
const provenance = require("@provenanceio/provenance.js");
const bip39 = require("bip39");
const createHmac = require("crypto");
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const tx_1 = require("cosmjs-types/cosmos/bank/v1beta1/tx");
const tx_2 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
const crypto_1 = require("@cosmjs/crypto");
const config_provenance_1 = require("../config/config.provenance");
class ProvenanceService {
    constructor(environment) {
        this.environment = environment;
    }
    async init() {
        var _a;
        this.client = await stargate_1.StargateClient.connect(this.environment === "MAIN_NET"
            ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_RPC_URL
            : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_RPC_URL);
        return new ProvenanceService((_a = this.environment) !== null && _a !== void 0 ? _a : "TEST_NET");
    }
    setEnvironment(environment) {
        this.environment = environment;
    }
    getEnvironment() {
        return this.environment;
    }
    async createProvenanceWallet() {
        const MASTER_SECRET = Buffer.from("Bitcoin seed", "utf8");
        const PRIVATE_KEY_SIZE = 32;
        const CHAINCODE_SIZE = 32;
        const mnemonic = bip39.generateMnemonic();
        const seed = bip39.mnemonicToSeedSync(mnemonic);
        const hmac = createHmac.createHmac("sha512", MASTER_SECRET);
        hmac.update(seed);
        const digest = hmac.digest();
        const privateKey = Buffer.from(digest.subarray(0, PRIVATE_KEY_SIZE));
        const chainCode = Buffer.from(digest.subarray(PRIVATE_KEY_SIZE, PRIVATE_KEY_SIZE + CHAINCODE_SIZE));
        const wallet = provenance.Wallet.fromPrivateKey(privateKey, chainCode, this.environment === "MAIN_NET" ? true : false);
        const getKey = wallet.getKey(0, 0);
        return {
            privateKey: privateKey.toString("hex"),
            address: getKey.address,
            publicKey: getKey.publicKey,
            mnemonicPhrase: mnemonic,
        };
    }
    async getBalance(address) {
        const balance = await this.client.getBalance(address, "nhash");
        return balance;
    }
    async getTransactionDetails(txHash) {
        const faucetTx = await this.client.getTx(txHash);
        const decodedTx = tx_2.Tx.decode(faucetTx.tx);
        const sentMessage = tx_1.MsgSend.decode(decodedTx.body.messages[0].value);
        const hash = Number(sentMessage.amount[0].amount) / 1000000000;
        return {
            senderAddress: sentMessage.fromAddress,
            receiverAddress: sentMessage.toAddress,
            tokenMintAddress: sentMessage.amount[0].denom,
            amount: hash,
        };
    }
    async createTransaction(senderAddress, receiverAddress, senderMnemonic, amount) {
        amount = 1000000000 * amount;
        const senderBalance = await this.client.getBalance(senderAddress, "nhash");
        if (Number(senderBalance.amount) < amount) {
            throw new Error(`Sender account balance not sufficient. Current balance ${senderBalance.amount}`);
        }
        const path = (0, crypto_1.stringToPath)(this.environment === "MAIN_NET"
            ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_HDPATH
            : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_HDPATH);
        const signer = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(senderMnemonic, {
            prefix: this.environment === "MAIN_NET"
                ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_HRP
                : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_HRP,
            hdPaths: [path],
        });
        const signerAccount = await signer.getAccounts();
        const signerAddress = signerAccount[0].address;
        if (signerAddress !== senderAddress) {
        }
        const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(this.environment === "MAIN_NET"
            ? config_provenance_1.PROVENANCE_CONFIG.MAIN_NET.PROVENANCE_RPC_URL
            : config_provenance_1.PROVENANCE_CONFIG.TEST_NET.PROVENANCE_RPC_URL, signer);
        const result = await signingClient.sendTokens(signerAddress, receiverAddress, [{ denom: "nhash", amount: amount.toString() }], {
            amount: [{ denom: "nhash", amount: "2502007950" }],
            gas: "131339",
        });
        return {
            gasUsed: result.gasUsed,
            gasWanted: result.gasWanted,
            transactionHash: result.transactionHash,
        };
    }
}
exports.ProvenanceService = ProvenanceService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmVuYW5jZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3Byb3ZlbmFuY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwwREFBMEQ7QUFDMUQsK0JBQStCO0FBQy9CLHFDQUFxQztBQUNyQywrQ0FJMEI7QUFDMUIseURBRytCO0FBQy9CLDREQUE4RDtBQUM5RCwwREFBdUQ7QUFDdkQsMkNBQThDO0FBQzlDLG1FQUFnRTtBQUVoRSxNQUFhLGlCQUFpQjtJQUc1QixZQUFZLFdBQXFDO1FBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTs7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0seUJBQWMsQ0FBQyxPQUFPLENBQ3hDLElBQUksQ0FBQyxXQUFXLEtBQUssVUFBVTtZQUM3QixDQUFDLENBQUMscUNBQWlCLENBQUMsUUFBUSxDQUFDLGtCQUFrQjtZQUMvQyxDQUFDLENBQUMscUNBQWlCLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUNsRCxDQUFDO1FBQ0YsT0FBTyxJQUFJLGlCQUFpQixDQUFDLE1BQUEsSUFBSSxDQUFDLFdBQVcsbUNBQUksVUFBVSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELGNBQWMsQ0FBQyxXQUFvQztRQUNqRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNqQyxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsS0FBSyxDQUFDLHNCQUFzQjtRQUMxQixNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRCxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUM1QixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFMUIsTUFB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S0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFDbEQsR0FBRyxFQUFFLFFBQVE7U0FDZCxDQUNGLENBQUM7UUFDRixPQUFPO1lBQ0wsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztZQUMzQixlQUFlLEVBQUUsTUFBTSxDQUFDLGVBQWU7U0FDeEMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXRJRCw4Q0FzSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92ZW5hbmNlVHJhbnNhY3Rpb25EZXRhaWxzIH0gZnJvbSBcInR5cGVzL3Byb3ZlbmFuY2UtdHJhbnNhY3Rpb24tZGV0YWlscy50eXBlXCI7XG5pbXBvcnQgeyBQcm92ZW5hbmNlV2FsbGV0IH0gZnJvbSBcInR5cGVzL3Byb3ZlbmFuY2Utd2FsbGV0LnR5cGVcIjtcblxuaW1wb3J0ICogYXMgcHJvdmVuYW5jZSBmcm9tIFwiQHByb3ZlbmFuY2Vpby9wcm92ZW5hbmNlLmpzXCI7XG5pbXBvcnQgKiBhcyBiaXAzOSBmcm9tIFwiYmlwMzlcIjtcbmltcG9ydCAqIGFzIGNyZWF0ZUhtYWMgZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0IHtcbiAgSW5kZXhlZFR4LFxuICBTdGFyZ2F0ZUNsaWVudCxcbiAgU2lnbmluZ1N0YXJnYXRlQ2xpZW50LFxufSBmcm9tIFwiQGNvc21qcy9zdGFyZ2F0ZVwiO1xuaW1wb3J0IHtcbiAgRGlyZWN0U2VjcDI1NmsxSGRXYWxsZXQsXG4gIE9mZmxpbmVEaXJlY3RTaWduZXIsXG59IGZyb20gXCJAY29zbWpzL3Byb3RvLXNpZ25pbmdcIjtcbmltcG9ydCB7IE1zZ1NlbmQgfSBmcm9tIFwiY29zbWpzLXR5cGVzL2Nvc21vcy9iYW5rL3YxYmV0YTEvdHhcIjtcbmltcG9ydCB7IFR4IH0gZnJvbSBcImNvc21qcy10eXBlcy9jb3Ntb3MvdHgvdjFiZXRhMS90eFwiO1xuaW1wb3J0IHsgc3RyaW5nVG9QYXRoIH0gZnJvbSBcIkBjb3NtanMvY3J5cHRvXCI7XG5pbXBvcnQgeyBQUk9WRU5BTkNFX0NPTkZJRyB9IGZyb20gXCIuLi9jb25maWcvY29uZmlnLnByb3ZlbmFuY2VcIjtcblxuZXhwb3J0IGNsYXNzIFByb3ZlbmFuY2VTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjbGllbnQ6IFN0YXJnYXRlQ2xpZW50O1xuICBwcml2YXRlIGVudmlyb25tZW50OiBcIlRFU1RfTkVUXCIgfCBcIk1BSU5fTkVUXCI7XG4gIGNvbnN0cnVjdG9yKGVudmlyb25tZW50PzogXCJURVNUX05FVFwiIHwgXCJNQUlOX05FVFwiKSB7XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGluaXQoKSB7XG4gICAgdGhpcy5jbGllbnQgPSBhd2FpdCBTdGFyZ2F0ZUNsaWVudC5jb25uZWN0KFxuICAgICAgdGhpcy5lbnZpcm9ubWVudCA9PT0gXCJNQUlOX05FVFwiXG4gICAgICAgID8gUFJPVkVOQU5DRV9DT05GSUcuTUFJTl9ORVQuUFJPVkVOQU5DRV9SUENfVVJMXG4gICAgICAgIDogUFJPVkVOQU5DRV9DT05GSUcuVEVTVF9ORVQuUFJPVkVOQU5DRV9SUENfVVJMXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IFByb3ZlbmFuY2VTZXJ2aWNlKHRoaXMuZW52aXJvbm1lbnQgPz8gXCJURVNUX05FVFwiKTtcbiAgfVxuXG4gIHNldEVudmlyb25tZW50KGVudmlyb25tZW50OiBcIlRFU1RfTkVUXCIgfCBcIk1BSU5fTkVUXCIpIHtcbiAgICB0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7XG4gIH1cblxuICBnZXRFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnZpcm9ubWVudDtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVByb3ZlbmFuY2VXYWxsZXQoKTogUHJvbWlzZTxQcm92ZW5hbmNlV2FsbGV0PiB7XG4gICAgY29uc3QgTUFTVEVSX1NFQ1JFVCA9IEJ1ZmZlci5mcm9tKFwiQml0Y29pbiBzZWVkXCIsIFwidXRmOFwiKTtcbiAgICBjb25zdCBQUklWQVRFX0tFWV9TSVpFID0gMzI7XG4gICAgY29uc3QgQ0hBSU5DT0RFX1NJWkUgPSAzMjtcblxuICAgIGNvbnN0IG1uZW1vbmljID0gYmlwMzkuZ2VuZXJhdGVNbmVtb25pYygpO1xuICAgIGNvbnN0IHNlZWQgPSBiaXAzOS5tbmVtb25pY1RvU2VlZFN5bmMobW5lbW9uaWMpO1xuICAgIGNvbnN0IGhtYWMgPSBjcmVhdGVIbWFjLmNyZWF0ZUhtYWMoXCJzaGE1MTJcIiwgTUFTVEVSX1NFQ1JFVCk7XG4gICAgaG1hYy51cGRhdGUoc2VlZCk7XG4gICAgY29uc3QgZGlnZXN0ID0gaG1hYy5kaWdlc3QoKTtcbiAgICBjb25zdCBwcml2YXRlS2V5ID0gQnVmZmVyLmZyb20oZGlnZXN0LnN1YmFycmF5KDAsIFBSSVZBVEVfS0VZX1NJWkUpKTtcbiAgICBjb25zdCBjaGFpbkNvZGUgPSBCdWZmZXIuZnJvbShcbiAgICAgIGRpZ2VzdC5zdWJhcnJheShQUklWQVRFX0tFWV9TSVpFLCBQUklWQVRFX0tFWV9TSVpFICsgQ0hBSU5DT0RFX1NJWkUpXG4gICAgKTtcblxuICAgIGNvbnN0IHdhbGxldCA9IHByb3ZlbmFuY2UuV2FsbGV0LmZyb21Qcml2YXRlS2V5KFxuICAgICAgcHJpdmF0ZUtleSxcbiAgICAgIGNoYWluQ29kZSxcbiAgICAgIHRoaXMuZW52aXJvbm1lbnQgPT09IFwiTUFJTl9ORVRcIiA/IHRydWUgOiBmYWxzZVxuICAgICk7XG4gICAgY29uc3QgZ2V0S2V5ID0gd2FsbGV0LmdldEtleSgwLCAwKTtcblxuICAgIHJldHVybiB7XG4gICAgICBwcml2YXRlS2V5OiBwcml2YXRlS2V5LnRvU3RyaW5nKFwiaGV4XCIpLFxuICAgICAgYWRkcmVzczogZ2V0S2V5LmFkZHJlc3MsXG4gICAgICBwdWJsaWNLZXk6IGdldEtleS5wdWJsaWNLZXksXG4gICAgICBtbmVtb25pY1BocmFzZTogbW5lbW9uaWMsXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGdldEJhbGFuY2UoYWRkcmVzczogc3RyaW5nKSB7XG4gICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldEJhbGFuY2UoYWRkcmVzcywgXCJuaGFzaFwiKTtcbiAgICByZXR1cm4gYmFsYW5jZTtcbiAgfVxuXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uRGV0YWlscyhcbiAgICB0eEhhc2g6IHN0cmluZ1xuICApOiBQcm9taXNlPFByb3ZlbmFuY2VUcmFuc2FjdGlvbkRldGFpbHM+IHtcbiAgICAvLyBjb25zdCBycGMgPSB0aGlzLmNmZy5wcm92ZW5hbmNlLnJwY191cmw7XG4gICAgY29uc3QgZmF1Y2V0VHg6IEluZGV4ZWRUeCA9IGF3YWl0IHRoaXMuY2xpZW50LmdldFR4KHR4SGFzaCk7XG5cbiAgICBjb25zdCBkZWNvZGVkVHg6IFR4ID0gVHguZGVjb2RlKGZhdWNldFR4LnR4KTtcblxuICAgIGNvbnN0IHNlbnRNZXNzYWdlOiBNc2dTZW5kID0gTXNnU2VuZC5kZWNvZGUoXG4gICAgICBkZWNvZGVkVHguYm9keS5tZXNzYWdlc1swXS52YWx1ZVxuICAgICk7XG4gICAgY29uc3QgaGFzaCA9IE51bWJlcihzZW50TWVzc2FnZS5hbW91bnRbMF0uYW1vdW50KSAvIDEwMDAwMDAwMDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmRlckFkZHJlc3M6IHNlbnRNZXNzYWdlLmZyb21BZGRyZXNzLFxuICAgICAgcmVjZWl2ZXJBZGRyZXNzOiBzZW50TWVzc2FnZS50b0FkZHJlc3MsXG4gICAgICB0b2tlbk1pbnRBZGRyZXNzOiBzZW50TWVzc2FnZS5hbW91bnRbMF0uZGVub20sXG4gICAgICBhbW91bnQ6IGhhc2gsXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVRyYW5zYWN0aW9uKFxuICAgIHNlbmRlckFkZHJlc3M6IHN0cmluZyxcbiAgICByZWNlaXZlckFkZHJlc3M6IHN0cmluZyxcbiAgICBzZW5kZXJNbmVtb25pYzogc3RyaW5nLFxuICAgIGFtb3VudDogbnVtYmVyXG4gICk6IFByb21pc2U8eyBnYXNVc2VkOiBudW1iZXI7IGdhc1dhbnRlZDogbnVtYmVyOyB0cmFuc2FjdGlvbkhhc2g6IHN0cmluZyB9PiB7XG4gICAgYW1vdW50ID0gMTAwMDAwMDAwMCAqIGFtb3VudDtcbiAgICBjb25zdCBzZW5kZXJCYWxhbmNlID0gYXdhaXQgdGhpcy5jbGllbnQuZ2V0QmFsYW5jZShzZW5kZXJBZGRyZXNzLCBcIm5oYXNoXCIpO1xuICAgIGlmIChOdW1iZXIoc2VuZGVyQmFsYW5jZS5hbW91bnQpIDwgYW1vdW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBTZW5kZXIgYWNjb3VudCBiYWxhbmNlIG5vdCBzdWZmaWNpZW50LiBDdXJyZW50IGJhbGFuY2UgJHtzZW5kZXJCYWxhbmNlLmFtb3VudH1gXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGggPSBzdHJpbmdUb1BhdGgoXG4gICAgICB0aGlzLmVudmlyb25tZW50ID09PSBcIk1BSU5fTkVUXCJcbiAgICAgICAgPyBQUk9WRU5BTkNFX0NPTkZJRy5NQUlOX05FVC5QUk9WRU5BTkNFX0hEUEFUSFxuICAgICAgICA6IFBST1ZFTkFOQ0VfQ09ORklHLlRFU1RfTkVULlBST1ZFTkFOQ0VfSERQQVRIXG4gICAgKTtcblxuICAgIGNvbnN0IHNpZ25lcjogT2ZmbGluZURpcmVjdFNpZ25lciA9XG4gICAgICBhd2FpdCBEaXJlY3RTZWNwMjU2azFIZFdhbGxldC5mcm9tTW5lbW9uaWMoc2VuZGVyTW5lbW9uaWMsIHtcbiAgICAgICAgcHJlZml4OlxuICAgICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPT09IFwiTUFJTl9ORVRcIlxuICAgICAgICAgICAgPyBQUk9WRU5BTkNFX0NPTkZJRy5NQUlOX05FVC5QUk9WRU5BTkNFX0hSUFxuICAgICAgICAgICAgOiBQUk9WRU5BTkNFX0NPTkZJRy5URVNUX05FVC5QUk9WRU5BTkNFX0hSUCxcbiAgICAgICAgaGRQYXRoczogW3BhdGhdLFxuICAgICAgfSk7XG4gICAgY29uc3Qgc2lnbmVyQWNjb3VudCA9IGF3YWl0IHNpZ25lci5nZXRBY2NvdW50cygpO1xuICAgIGNvbnN0IHNpZ25lckFkZHJlc3MgPSBzaWduZXJBY2NvdW50WzBdLmFkZHJlc3M7XG4gICAgaWYgKHNpZ25lckFkZHJlc3MgIT09IHNlbmRlckFkZHJlc3MpIHtcbiAgICB9XG5cbiAgICBjb25zdCBzaWduaW5nQ2xpZW50ID0gYXdhaXQgU2lnbmluZ1N0YXJnYXRlQ2xpZW50LmNvbm5lY3RXaXRoU2lnbmVyKFxuICAgICAgdGhpcy5lbnZpcm9ubWVudCA9PT0gXCJNQUlOX05FVFwiXG4gICAgICAgID8gUFJPVkVOQU5DRV9DT05GSUcuTUFJTl9ORVQuUFJPVkVOQU5DRV9SUENfVVJMXG4gICAgICAgIDogUFJPVkVOQU5DRV9DT05GSUcuVEVTVF9ORVQuUFJPVkVOQU5DRV9SUENfVVJMLFxuICAgICAgc2lnbmVyXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25pbmdDbGllbnQuc2VuZFRva2VucyhcbiAgICAgIHNpZ25lckFkZHJlc3MsXG4gICAgICByZWNlaXZlckFkZHJlc3MsXG4gICAgICBbeyBkZW5vbTogXCJuaGFzaFwiLCBhbW91bnQ6IGFtb3VudC50b1N0cmluZygpIH1dLFxuICAgICAge1xuICAgICAgICBhbW91bnQ6IFt7IGRlbm9tOiBcIm5oYXNoXCIsIGFtb3VudDogXCIyNTAyMDA3OTUwXCIgfV0sXG4gICAgICAgIGdhczogXCIxMzEzMzlcIixcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBnYXNVc2VkOiByZXN1bHQuZ2FzVXNlZCxcbiAgICAgIGdhc1dhbnRlZDogcmVzdWx0Lmdhc1dhbnRlZCxcbiAgICAgIHRyYW5zYWN0aW9uSGFzaDogcmVzdWx0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICB9O1xuICB9XG59XG4iXX0=