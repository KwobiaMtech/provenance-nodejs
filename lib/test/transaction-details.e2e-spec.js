"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = require("dotenv");
const provenance_service_1 = require("../src/services/provenance.service");
dotenv.config();
describe("TRANSACTION DETAILS TEST", () => {
    let provenance;
    beforeAll(async () => {
        provenance = new provenance_service_1.ProvenanceService();
        await provenance.init();
    });
    const createWallet = () => {
        const wallet = provenance.createProvenanceWallet();
        expect(wallet.privateKey).toBeDefined();
        expect(wallet.address).toBeDefined();
        expect(wallet.publicKey).toBeDefined();
        expect(wallet.mnemonicPhrase).toBeDefined();
        return wallet;
    };
    it("should return transaction details from transaction hash", async () => {
        const wallet = createWallet();
        const transaction = await provenance.createTransaction(process.env.ADDRESS, wallet.address, process.env.MNEMONIC_PHRASE, 1);
        expect(transaction).toBeDefined();
        expect(transaction.gasUsed).toBeDefined();
        expect(transaction.gasWanted).toBeDefined();
        expect(transaction.transactionHash).toBeDefined();
        const receiverBalance = await provenance.getBalance(wallet.address);
        expect(receiverBalance.amount).toEqual("1000000000");
        const transactionDetails = await provenance.getTransactionDetails(transaction.transactionHash);
        expect(transactionDetails).toBeDefined();
        expect(transactionDetails.amount).toEqual(1);
        expect(transactionDetails.receiverAddress).toEqual(wallet.address);
        expect(transactionDetails.senderAddress).toEqual(process.env.ADDRESS);
        expect(transactionDetails.tokenMintAddress).toEqual("nhash");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24tZGV0YWlscy5lMmUtc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvdHJhbnNhY3Rpb24tZGV0YWlscy5lMmUtc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQywyRUFBdUU7QUFHdkUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLFFBQVEsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsSUFBSSxVQUE2QixDQUFDO0lBQ2xDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixVQUFVLEdBQUcsSUFBSSxzQ0FBaUIsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUYsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZFLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLE1BQU0sVUFBVSxDQUFDLGlCQUFpQixDQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFDbkIsTUFBTSxDQUFDLE9BQU8sRUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFDM0IsQ0FBQyxDQUNGLENBQUM7UUFDRixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbEQsTUFBTSxlQUFlLEdBQUcsTUFBTSxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyRCxNQUFNLGtCQUFrQixHQUN0QixNQUFNLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDdEUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDekMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxNQUFNLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IHsgUHJvdmVuYW5jZVNlcnZpY2UgfSBmcm9tIFwiLi4vc3JjL3NlcnZpY2VzL3Byb3ZlbmFuY2Uuc2VydmljZVwiO1xuaW1wb3J0IHsgUHJvdmVuYW5jZVRyYW5zYWN0aW9uRGV0YWlscyB9IGZyb20gXCJpbmRleFwiO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5cbmRlc2NyaWJlKFwiVFJBTlNBQ1RJT04gREVUQUlMUyBURVNUXCIsICgpID0+IHtcbiAgbGV0IHByb3ZlbmFuY2U6IFByb3ZlbmFuY2VTZXJ2aWNlO1xuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xuICAgIHByb3ZlbmFuY2UgPSBuZXcgUHJvdmVuYW5jZVNlcnZpY2UoKTtcbiAgICBhd2FpdCBwcm92ZW5hbmNlLmluaXQoKTtcbiAgfSk7XG5cbiAgY29uc3QgY3JlYXRlV2FsbGV0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHdhbGxldCA9IHByb3ZlbmFuY2UuY3JlYXRlUHJvdmVuYW5jZVdhbGxldCgpO1xuICAgIGV4cGVjdCh3YWxsZXQucHJpdmF0ZUtleSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qod2FsbGV0LmFkZHJlc3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHdhbGxldC5wdWJsaWNLZXkpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHdhbGxldC5tbmVtb25pY1BocmFzZSkudG9CZURlZmluZWQoKTtcbiAgICByZXR1cm4gd2FsbGV0O1xuICB9O1xuXG4gIGl0KFwic2hvdWxkIHJldHVybiB0cmFuc2FjdGlvbiBkZXRhaWxzIGZyb20gdHJhbnNhY3Rpb24gaGFzaFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgd2FsbGV0ID0gY3JlYXRlV2FsbGV0KCk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBwcm92ZW5hbmNlLmNyZWF0ZVRyYW5zYWN0aW9uKFxuICAgICAgcHJvY2Vzcy5lbnYuQUREUkVTUyxcbiAgICAgIHdhbGxldC5hZGRyZXNzLFxuICAgICAgcHJvY2Vzcy5lbnYuTU5FTU9OSUNfUEhSQVNFLFxuICAgICAgMVxuICAgICk7XG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5nYXNVc2VkKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh0cmFuc2FjdGlvbi5nYXNXYW50ZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uLnRyYW5zYWN0aW9uSGFzaCkudG9CZURlZmluZWQoKTtcblxuICAgIGNvbnN0IHJlY2VpdmVyQmFsYW5jZSA9IGF3YWl0IHByb3ZlbmFuY2UuZ2V0QmFsYW5jZSh3YWxsZXQuYWRkcmVzcyk7XG4gICAgZXhwZWN0KHJlY2VpdmVyQmFsYW5jZS5hbW91bnQpLnRvRXF1YWwoXCIxMDAwMDAwMDAwXCIpO1xuXG4gICAgY29uc3QgdHJhbnNhY3Rpb25EZXRhaWxzOiBQcm92ZW5hbmNlVHJhbnNhY3Rpb25EZXRhaWxzID1cbiAgICAgIGF3YWl0IHByb3ZlbmFuY2UuZ2V0VHJhbnNhY3Rpb25EZXRhaWxzKHRyYW5zYWN0aW9uLnRyYW5zYWN0aW9uSGFzaCk7XG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uRGV0YWlscykudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodHJhbnNhY3Rpb25EZXRhaWxzLmFtb3VudCkudG9FcXVhbCgxKTtcbiAgICBleHBlY3QodHJhbnNhY3Rpb25EZXRhaWxzLnJlY2VpdmVyQWRkcmVzcykudG9FcXVhbCh3YWxsZXQuYWRkcmVzcyk7XG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uRGV0YWlscy5zZW5kZXJBZGRyZXNzKS50b0VxdWFsKHByb2Nlc3MuZW52LkFERFJFU1MpO1xuICAgIGV4cGVjdCh0cmFuc2FjdGlvbkRldGFpbHMudG9rZW5NaW50QWRkcmVzcykudG9FcXVhbChcIm5oYXNoXCIpO1xuICB9KTtcbn0pO1xuIl19