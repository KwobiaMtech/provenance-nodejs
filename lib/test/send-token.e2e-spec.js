"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = require("dotenv");
const provenance_service_1 = require("../src/services/provenance.service");
dotenv.config();
describe("SEND TOKEN TEST", () => {
    let provenance;
    beforeAll(async () => {
        provenance = new provenance_service_1.ProvenanceService();
        await provenance.init();
    });
    const createWallet = () => {
        const wallet = provenance.createProvenanceWallet();
        expect(wallet.privateKey).toBeDefined();
        expect(wallet.address).toBeDefined();
        expect(wallet.publicKey).toBeDefined();
        expect(wallet.mnemonicPhrase).toBeDefined();
        return wallet;
    };
    it("should be able to send token", async () => {
        const wallet = createWallet();
        const transaction = await provenance.createTransaction(process.env.ADDRESS, wallet.address, process.env.MNEMONIC_PHRASE, 1);
        expect(transaction).toBeDefined();
        expect(transaction.gasUsed).toBeDefined();
        expect(transaction.gasWanted).toBeDefined();
        expect(transaction.transactionHash).toBeDefined();
        const receiverBalance = await provenance.getBalance(wallet.address);
        expect(receiverBalance.amount).toEqual("1000000000");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC10b2tlbi5lMmUtc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvc2VuZC10b2tlbi5lMmUtc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQywyRUFBdUU7QUFFdkUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxVQUE2QixDQUFDO0lBQ2xDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixVQUFVLEdBQUcsSUFBSSxzQ0FBaUIsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUYsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzVDLE1BQU0sTUFBTSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLE1BQU0sVUFBVSxDQUFDLGlCQUFpQixDQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFDbkIsTUFBTSxDQUFDLE9BQU8sRUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFDM0IsQ0FBQyxDQUNGLENBQUM7UUFDRixNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbEQsTUFBTSxlQUFlLEdBQUcsTUFBTSxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcbmltcG9ydCB7IFByb3ZlbmFuY2VTZXJ2aWNlIH0gZnJvbSBcIi4uL3NyYy9zZXJ2aWNlcy9wcm92ZW5hbmNlLnNlcnZpY2VcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuXG5kZXNjcmliZShcIlNFTkQgVE9LRU4gVEVTVFwiLCAoKSA9PiB7XG4gIGxldCBwcm92ZW5hbmNlOiBQcm92ZW5hbmNlU2VydmljZTtcbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBwcm92ZW5hbmNlID0gbmV3IFByb3ZlbmFuY2VTZXJ2aWNlKCk7XG4gICAgYXdhaXQgcHJvdmVuYW5jZS5pbml0KCk7XG4gIH0pO1xuXG4gIGNvbnN0IGNyZWF0ZVdhbGxldCA9ICgpID0+IHtcbiAgICBjb25zdCB3YWxsZXQgPSBwcm92ZW5hbmNlLmNyZWF0ZVByb3ZlbmFuY2VXYWxsZXQoKTtcbiAgICBleHBlY3Qod2FsbGV0LnByaXZhdGVLZXkpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHdhbGxldC5hZGRyZXNzKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh3YWxsZXQucHVibGljS2V5KS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh3YWxsZXQubW5lbW9uaWNQaHJhc2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgcmV0dXJuIHdhbGxldDtcbiAgfTtcblxuICBpdChcInNob3VsZCBiZSBhYmxlIHRvIHNlbmQgdG9rZW5cIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHdhbGxldCA9IGNyZWF0ZVdhbGxldCgpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgcHJvdmVuYW5jZS5jcmVhdGVUcmFuc2FjdGlvbihcbiAgICAgIHByb2Nlc3MuZW52LkFERFJFU1MsXG4gICAgICB3YWxsZXQuYWRkcmVzcyxcbiAgICAgIHByb2Nlc3MuZW52Lk1ORU1PTklDX1BIUkFTRSxcbiAgICAgIDFcbiAgICApO1xuICAgIGV4cGVjdCh0cmFuc2FjdGlvbikudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodHJhbnNhY3Rpb24uZ2FzVXNlZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodHJhbnNhY3Rpb24uZ2FzV2FudGVkKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh0cmFuc2FjdGlvbi50cmFuc2FjdGlvbkhhc2gpLnRvQmVEZWZpbmVkKCk7XG5cbiAgICBjb25zdCByZWNlaXZlckJhbGFuY2UgPSBhd2FpdCBwcm92ZW5hbmNlLmdldEJhbGFuY2Uod2FsbGV0LmFkZHJlc3MpO1xuICAgIGV4cGVjdChyZWNlaXZlckJhbGFuY2UuYW1vdW50KS50b0VxdWFsKFwiMTAwMDAwMDAwMFwiKTtcbiAgfSk7XG59KTtcbiJdfQ==