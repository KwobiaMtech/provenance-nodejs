"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = require("dotenv");
const provenance_service_1 = require("../src/services/provenance.service");
dotenv.config();
describe("SEND TOKEN TEST", () => {
    let client;
    beforeAll(async () => {
        client = await provenance_service_1.Provenance.build();
    });
    const createWallet = async () => {
        const wallet = client.createWallet();
        expect(wallet.privateKey).toBeDefined();
        expect(wallet.address).toBeDefined();
        expect(wallet.publicKey).toBeDefined();
        expect(wallet.mnemonicPhrase).toBeDefined();
        return wallet;
    };
    it("should be able to send token", async () => {
        const wallet = await createWallet();
        const transaction = await client.createTransaction(process.env.ADDRESS, wallet.address, process.env.MNEMONIC_PHRASE, 1);
        expect(transaction).toBeDefined();
        expect(transaction.gasUsed).toBeDefined();
        expect(transaction.gasWanted).toBeDefined();
        expect(transaction.transactionHash).toBeDefined();
        const receiverBalance = await client.getBalance(wallet.address);
        expect(receiverBalance.amount).toEqual("1000000000");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC10b2tlbi5lMmUtc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvc2VuZC10b2tlbi5lMmUtc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQywyRUFBZ0U7QUFFaEUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxNQUFrQixDQUFDO0lBQ3ZCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLEdBQUcsTUFBTSwrQkFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUwsTUFBTSxZQUFZLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDOUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUYsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzVDLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxFQUFFLENBQUM7UUFDcEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxNQUFNLENBQUMsaUJBQWlCLENBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUNuQixNQUFNLENBQUMsT0FBTyxFQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUMzQixDQUFDLENBQ0YsQ0FBQztRQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsQyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVsRCxNQUFNLGVBQWUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IHsgUHJvdmVuYW5jZSB9IGZyb20gXCIuLi9zcmMvc2VydmljZXMvcHJvdmVuYW5jZS5zZXJ2aWNlXCI7XG5cbmRvdGVudi5jb25maWcoKTtcblxuZGVzY3JpYmUoXCJTRU5EIFRPS0VOIFRFU1RcIiwgKCkgPT4ge1xuICAgIGxldCBjbGllbnQ6IFByb3ZlbmFuY2U7XG4gICAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAgIGNsaWVudCA9IGF3YWl0IFByb3ZlbmFuY2UuYnVpbGQoKTtcbiAgICB9KTtcblxuICBjb25zdCBjcmVhdGVXYWxsZXQgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgd2FsbGV0ID0gY2xpZW50LmNyZWF0ZVdhbGxldCgpO1xuICAgIGV4cGVjdCh3YWxsZXQucHJpdmF0ZUtleSkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3Qod2FsbGV0LmFkZHJlc3MpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHdhbGxldC5wdWJsaWNLZXkpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHdhbGxldC5tbmVtb25pY1BocmFzZSkudG9CZURlZmluZWQoKTtcbiAgICByZXR1cm4gd2FsbGV0O1xuICB9O1xuXG4gIGl0KFwic2hvdWxkIGJlIGFibGUgdG8gc2VuZCB0b2tlblwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgd2FsbGV0ID0gYXdhaXQgY3JlYXRlV2FsbGV0KCk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBjbGllbnQuY3JlYXRlVHJhbnNhY3Rpb24oXG4gICAgICBwcm9jZXNzLmVudi5BRERSRVNTLFxuICAgICAgd2FsbGV0LmFkZHJlc3MsXG4gICAgICBwcm9jZXNzLmVudi5NTkVNT05JQ19QSFJBU0UsXG4gICAgICAxXG4gICAgKTtcbiAgICBleHBlY3QodHJhbnNhY3Rpb24pLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uLmdhc1VzZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHRyYW5zYWN0aW9uLmdhc1dhbnRlZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodHJhbnNhY3Rpb24udHJhbnNhY3Rpb25IYXNoKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgY29uc3QgcmVjZWl2ZXJCYWxhbmNlID0gYXdhaXQgY2xpZW50LmdldEJhbGFuY2Uod2FsbGV0LmFkZHJlc3MpO1xuICAgIGV4cGVjdChyZWNlaXZlckJhbGFuY2UuYW1vdW50KS50b0VxdWFsKFwiMTAwMDAwMDAwMFwiKTtcbiAgfSk7XG59KTtcbiJdfQ==